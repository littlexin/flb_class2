<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-stm32f4xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-stm32f4xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri May 03 16:36:50 2019
<BR><P>
<H3>Maximum Stack Usage =        844 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_init_thread_entry &rArr; dmp_sys_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[395]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f2]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[101]">rt_kprintf</a><BR>
 <LI><a href="#[1a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">DebugMon_Handler</a><BR>
 <LI><a href="#[2f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from platform.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">SysTick_Handler</a> from board.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[1f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from drv_hwtimer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d0]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[99]">_pin_control</a> from pin.o(.text) referenced from pin.o(.constdata)
 <LI><a href="#[97]">_pin_read</a> from pin.o(.text) referenced from pin.o(.constdata)
 <LI><a href="#[98]">_pin_write</a> from pin.o(.text) referenced from pin.o(.constdata)
 <LI><a href="#[77]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9c]">_pwm_control</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(.constdata)
 <LI><a href="#[9a]">_pwm_read</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(.constdata)
 <LI><a href="#[9b]">_pwm_write</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(.constdata)
 <LI><a href="#[79]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[78]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[76]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[aa]">anop_init</a> from anop.o(.text) referenced from anop.o(.rti_fn.4)
 <LI><a href="#[cf]">cmd_free</a> from msh_cmd.o(.text) referenced from msh_cmd.o(FSymTab)
 <LI><a href="#[cd]">cmd_ps</a> from msh_cmd.o(.text) referenced from msh_cmd.o(FSymTab)
 <LI><a href="#[b5]">cmd_pwm_set_duty_ratio</a> from drv_pwm.o(.text) referenced from drv_pwm.o(FSymTab)
 <LI><a href="#[b0]">cmd_swing_angle</a> from wind_swing.o(.text) referenced from wind_swing.o(FSymTab)
 <LI><a href="#[b3]">cmd_swing_deinit</a> from wind_swing.o(.text) referenced from wind_swing.o(FSymTab)
 <LI><a href="#[b2]">cmd_swing_init</a> from wind_swing.o(.text) referenced from wind_swing.o(FSymTab)
 <LI><a href="#[b1]">cmd_swing_pid</a> from wind_swing.o(.text) referenced from wind_swing.o(FSymTab)
 <LI><a href="#[af]">cmd_swing_radius</a> from wind_swing.o(.text) referenced from wind_swing.o(FSymTab)
 <LI><a href="#[ce]">cmd_time</a> from msh_cmd.o(.text) referenced from msh_cmd.o(FSymTab)
 <LI><a href="#[72]">dmp_notify_update</a> from dmp.o(.text) referenced from dmp.o(.text)
 <LI><a href="#[237]">dmp_thread_entry</a> from dmp.o(.text) referenced from dmp.o(.text)
 <LI><a href="#[b7]">dump_eulerangle</a> from dmp.o(.text) referenced from dmp.o(FSymTab)
 <LI><a href="#[75]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[ac]">finsh_system_init</a> from shell.o(.text) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[366]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[8b]">gpio_get_scl</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[8a]">gpio_get_sda</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[89]">gpio_set_scl</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[88]">gpio_set_sda</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[8c]">gpio_udelay</a> from stm32_i2c.o(.text) referenced from stm32_i2c.o(.constdata)
 <LI><a href="#[c0]">hello</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[96]">i2c_bit_xfer</a> from i2c-bit-ops.o(.text) referenced from i2c-bit-ops.o(.constdata)
 <LI><a href="#[95]">i2c_bus_device_control</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.constdata)
 <LI><a href="#[93]">i2c_bus_device_read</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.constdata)
 <LI><a href="#[94]">i2c_bus_device_write</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.constdata)
 <LI><a href="#[7]">ili9486l_DisplayOff</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[6]">ili9486l_DisplayOn</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[11]">ili9486l_DrawBitmap</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[d]">ili9486l_DrawHLine</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[12]">ili9486l_DrawRGBImage</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[e]">ili9486l_DrawVLine</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[10]">ili9486l_GetLcdPixelHeight</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[f]">ili9486l_GetLcdPixelWidth</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[4]">ili9486l_Init</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[5]">ili9486l_ReadID</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[b]">ili9486l_ReadPixel</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[9]">ili9486l_SetCursor</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[8]">ili9486l_SetDisplayDirection</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[c]">ili9486l_SetDisplayWindow</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[a]">ili9486l_WritePixel</a> from ili9486l.o(.text) referenced 2 times from ili9486l.o(.data)
 <LI><a href="#[7a]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[cb]">list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[ca]">list_device</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c4]">list_event</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c6]">list_mailbox</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[ae]">list_mem</a> from mem.o(.text) referenced from mem.o(FSymTab)
 <LI><a href="#[c8]">list_mempool</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c7]">list_msgqueue</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c5]">list_mutex</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c3]">list_sem</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c2]">list_thread</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[c9]">list_timer</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[cc]">msh_help</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[b6]">pwm_clear</a> from drv_pwm.o(.text) referenced from drv_pwm.o(FSymTab)
 <LI><a href="#[be]">pwm_disable</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[bd]">pwm_enable</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[a8]">pwm_init</a> from drv_pwm.o(.text) referenced from drv_pwm.o(.rti_fn.1)
 <LI><a href="#[bf]">pwm_set</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[b4]">rt_hw_cpu_reset</a> from board.o(.text) referenced from board.o(FSymTab)
 <LI><a href="#[8f]">rt_hwtimer_close</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[92]">rt_hwtimer_control</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[8d]">rt_hwtimer_init</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[8e]">rt_hwtimer_open</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[90]">rt_hwtimer_read</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[91]">rt_hwtimer_write</a> from hwtimer.o(.text) referenced from hwtimer.o(.constdata)
 <LI><a href="#[ab]">rt_i2c_core_init</a> from i2c_core.o(.text) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[18f]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[b8]">rt_pin_mode</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[ba]">rt_pin_read</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[b9]">rt_pin_write</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[bb]">rt_pwm_enable</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[bc]">rt_pwm_set</a> from rt_drv_pwm.o(.text) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[9f]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[a2]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[9d]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[9e]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[a0]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[a1]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[170]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[6f]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[173]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[a9]">rti_board_end</a> from components.o(.text) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[a4]">rti_board_start</a> from components.o(.text) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[ad]">rti_end</a> from components.o(.text) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[a3]">rti_start</a> from components.o(.text) referenced from components.o(.rti_fn.0)
 <LI><a href="#[7c]">stm32_configure</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[7d]">stm32_control</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[7f]">stm32_getc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[a6]">stm32_hw_pin_init</a> from gpio.o(.text) referenced from gpio.o(.rti_fn.1)
 <LI><a href="#[a5]">stm32_hw_usart_init</a> from usart.o(.text) referenced from usart.o(.rti_fn.1)
 <LI><a href="#[a7]">stm32_hwtimer_init</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.rti_fn.1)
 <LI><a href="#[80]">stm32_pin_mode</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[82]">stm32_pin_read</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[81]">stm32_pin_write</a> from gpio.o(.text) referenced from gpio.o(.constdata)
 <LI><a href="#[7e]">stm32_putc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[19e]">swing_mode_1</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[1a7]">swing_mode_2</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[1a8]">swing_mode_3</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[1aa]">swing_mode_4</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[1ab]">swing_mode_5</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[70]">swing_thread_entry</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[71]">swing_timer_cb</a> from wind_swing.o(.text) referenced from wind_swing.o(.text)
 <LI><a href="#[86]">timer_counter_get</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[87]">timer_ctrl</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[83]">timer_init</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[84]">timer_start</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[85]">timer_stop</a> from drv_hwtimer.o(.text) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[c1]">version</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d1]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d9]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3da]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[37c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3dc]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[e0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3dd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3de]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3df]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3e0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3e1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[da]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3e2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3e3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[db]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3e4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3e5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3e6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3e7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3e8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3e9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3ea]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3eb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3ec]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3ed]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3ee]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3ef]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3f0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3f1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[3f2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[3f3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3f4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[3f5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[3f6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3f7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d2]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3f8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[dd]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[df]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3f9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3fa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[39d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3fb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[198]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[13d]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[e8]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[eb]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17f]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[1bf]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3fc]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>rt_device_find</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>

<P><STRONG><a name="[f5]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>

<P><STRONG><a name="[f7]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[3fd]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>rt_device_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[fe]"></a>rt_device_destroy</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[100]"></a>rt_device_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[102]"></a>rt_device_open</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[103]"></a>rt_device_close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[104]"></a>rt_device_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[106]"></a>rt_device_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_long
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_short
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_char
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[107]"></a>rt_device_control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>

<P><STRONG><a name="[108]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[109]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[10a]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, idle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[10b]"></a>rt_thread_idle_delhook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, idle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[10c]"></a>rt_thread_idle_excute</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[110]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3fe]"></a>rt_thread_idle_gethandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reg_int_cb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[11c]"></a>rt_sem_detach</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[11d]"></a>rt_sem_create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[11f]"></a>rt_sem_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[120]"></a>rt_sem_take</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[124]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[125]"></a>rt_sem_release</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_notify_update
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_timer_cb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[127]"></a>rt_sem_control</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[128]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[129]"></a>rt_mutex_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[12a]"></a>rt_mutex_create</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[12b]"></a>rt_mutex_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[12c]"></a>rt_mutex_take</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>

<P><STRONG><a name="[12e]"></a>rt_mutex_release</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>

<P><STRONG><a name="[12f]"></a>rt_mutex_control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[130]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[131]"></a>rt_event_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[132]"></a>rt_event_create</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[133]"></a>rt_event_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[134]"></a>rt_event_send</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[135]"></a>rt_event_recv</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[136]"></a>rt_event_control</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[137]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[139]"></a>rt_mb_detach</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[13a]"></a>rt_mb_create</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[13b]"></a>rt_mb_delete</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[13c]"></a>rt_mb_send_wait</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[13e]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[13f]"></a>rt_mb_recv</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[140]"></a>rt_mb_control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[141]"></a>rt_mq_init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[142]"></a>rt_mq_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[143]"></a>rt_mq_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[144]"></a>rt_mq_create</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[145]"></a>rt_mq_send</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[147]"></a>rt_mq_urgent</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[148]"></a>rt_mq_recv</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[149]"></a>rt_mq_control</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[3ff]"></a>rt_interrupt_enter_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>rt_interrupt_leave_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[14b]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10d]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[14c]"></a>rt_get_errno</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[105]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[14d]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[fd]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_long
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_short
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_char
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_create
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[146]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
</UL>

<P><STRONG><a name="[368]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[150]"></a>rt_memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[14f]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[14e]"></a>rt_strstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[401]"></a>rt_strcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[f3]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[402]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>rt_strnlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[404]"></a>strdup</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[152]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[101]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eulerangle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwm_set_duty_ratio
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_pid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_angle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_radius
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>

<P><STRONG><a name="[156]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[157]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[158]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[111]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[367]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[159]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15a]"></a>rt_kputs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[15b]"></a>rt_malloc_align</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[15c]"></a>rt_free_align</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[167]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[405]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>rt_assert_handler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_long
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_short
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_char
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_device
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt_mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_detach_irq
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[406]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[fc]"></a>rt_malloc</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_create
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[ff]"></a>rt_free</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_delete
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[15f]"></a>rt_realloc</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[160]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_create
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[408]"></a>rt_memory_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[409]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[f1]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[f6]"></a>rt_object_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[fa]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[11e]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[10f]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[f9]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[f8]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[164]"></a>rt_object_find</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[40e]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[16a]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[16b]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[16d]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[123]"></a>rt_schedule</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[f0]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_angle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_radius
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_timer_cb
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[f4]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_angle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_radius
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_timer_cb
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[40f]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>rt_thread_suspend_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>rt_thread_resume_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>rt_thread_inited_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[170]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[118]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[113]"></a>rt_thread_startup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[179]"></a>rt_thread_detach</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[17a]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[17b]"></a>rt_thread_delete</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[ed]"></a>rt_thread_yield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[115]"></a>rt_thread_suspend</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[17c]"></a>rt_thread_sleep</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[17d]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[17e]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>

<P><STRONG><a name="[12d]"></a>rt_thread_control</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[180]"></a>rt_thread_find</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_thread_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[413]"></a>rt_timer_enter_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>rt_timer_exit_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[171]"></a>rt_timer_detach</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[186]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[187]"></a>rt_timer_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[122]"></a>rt_timer_start</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[178]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[121]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[ee]"></a>rt_timer_check</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[189]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[18a]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[19b]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[18b]"></a>anop_upload_char</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, anop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[18c]"></a>anop_upload_short</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, anop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[18d]"></a>anop_upload_long</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, anop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[18e]"></a>anop_upload_float</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, anop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = anop_upload_float &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[aa]"></a>anop_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, anop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = anop_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> anop.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[18f]"></a>rt_init_thread_entry</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = rt_init_thread_entry &rArr; dmp_sys_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>rt_application_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[195]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockLPModeCmd
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockLPModeCmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockLPModeCmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockLPModeCmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockLPModeCmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphResetCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO2Config
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearITPendingBit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetITStatus
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearFlag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetFlagStatus
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ITConfig
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDCmd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDECCCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDDeInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMDeInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFIFOStatus
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PeriphIncOffsetSizeConfig
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OneBitMethodCmd
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_RemapConfig
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectHallSensor
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCCDMA
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAConfig
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCOM
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNCmd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3NPolarityConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2NPolarityConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PolarityConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1NPolarityConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC4Ref
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC3Ref
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC2Ref
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC1Ref
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC4Config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC3Config
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC2Config
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetClockDivision
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetPrescaler
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_CompensationCellCmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
</UL>

<P><STRONG><a name="[196]"></a>rtthread_startup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = rtthread_startup &rArr; finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = main &rArr; rtthread_startup &rArr; finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19e]"></a>swing_mode_1</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = swing_mode_1 &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1a7]"></a>swing_mode_2</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = swing_mode_2 &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>swing_mode_3</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = swing_mode_3 &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>swing_mode_4</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = swing_mode_4 &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1ab]"></a>swing_mode_5</STRONG> (Thumb, 496 bytes, Stack size 72 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = swing_mode_5 &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anop_upload_float
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1ac]"></a>swing_set_radius</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = swing_set_radius &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_radius
</UL>

<P><STRONG><a name="[1ad]"></a>swing_set_angle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = swing_set_angle &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_angle
</UL>

<P><STRONG><a name="[1ae]"></a>swing_init</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = swing_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_output_limit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_integral_separation
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_integral_limit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_init
</UL>

<P><STRONG><a name="[1b3]"></a>swing_deinit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = swing_deinit &rArr; pid_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_delete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_deinit
</UL>

<P><STRONG><a name="[af]"></a>cmd_swing_radius</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = cmd_swing_radius &rArr; swing_set_radius &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_radius
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(FSymTab)
</UL>
<P><STRONG><a name="[b0]"></a>cmd_swing_angle</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = cmd_swing_angle &rArr; swing_set_angle &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_set_angle
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(FSymTab)
</UL>
<P><STRONG><a name="[b1]"></a>cmd_swing_pid</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = cmd_swing_pid &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(FSymTab)
</UL>
<P><STRONG><a name="[b2]"></a>cmd_swing_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cmd_swing_init &rArr; swing_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(FSymTab)
</UL>
<P><STRONG><a name="[b3]"></a>cmd_swing_deinit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = cmd_swing_deinit &rArr; swing_deinit &rArr; pid_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(FSymTab)
</UL>
<P><STRONG><a name="[1b9]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1bc]"></a>SysTick_Configuration</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SysTick_Configuration &rArr; SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>rt_hw_board_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b4]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_hw_cpu_reset &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(FSymTab)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>rt_platform_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_platform_init &rArr; rt_hw_exti_init &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = USART3_IRQHandler &rArr; uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>stm32_hw_usart_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1e5]"></a>get_pin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[81]"></a>stm32_pin_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = stm32_pin_write &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>stm32_pin_read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = stm32_pin_read &rArr; GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>stm32_pin_mode</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = stm32_pin_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>stm32_hw_pin_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = stm32_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[a7]"></a>stm32_hwtimer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = stm32_hwtimer_init &rArr; rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>rt_hw_i2c_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[19d]"></a>pwm_set_duty_ratio</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pwm_set_duty_ratio &rArr; TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwm_set_duty_ratio
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_move
</UL>

<P><STRONG><a name="[b6]"></a>pwm_clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = pwm_clear &rArr; TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[a8]"></a>pwm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = pwm_init &rArr; TIM_Configuration &rArr; TIM_OC4Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[b5]"></a>cmd_pwm_set_duty_ratio</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = cmd_pwm_set_duty_ratio &rArr; pwm_set_duty_ratio &rArr; TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[20f]"></a>ili9486l_WriteReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili9486l.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayDirection
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayWindow
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_DisplayOff
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_DisplayOn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_Init
</UL>

<P><STRONG><a name="[210]"></a>ili9486l_WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9486l.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayDirection
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayWindow
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_Init
</UL>

<P><STRONG><a name="[4]"></a>ili9486l_Init</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ili9486l_Init &rArr; LCD_Delay &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteReg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[211]"></a>ili9486l_ReadData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ili9486l_ReadData &rArr; LCD_IO_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_DrawVLine
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_ReadID
</UL>

<P><STRONG><a name="[5]"></a>ili9486l_ReadID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9486l_ReadID &rArr; ili9486l_ReadData &rArr; LCD_IO_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ili9486l_DisplayOn</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ili9486l_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ili9486l_DisplayOff</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ili9486l_DisplayOff
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ili9486l_SetCursor</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ili9486l.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ili9486l_WritePixel</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ili9486l_WritePixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ili9486l_ReadPixel</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ili9486l_ReadPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ili9486l_SetDisplayWindow</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ili9486l_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayDirection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ili9486l_DrawHLine</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ili9486l_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>ili9486l_DrawVLine</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9486l_DrawVLine &rArr; ili9486l_ReadData &rArr; LCD_IO_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ili9486l_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9486l.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ili9486l_GetLcdPixelHeight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9486l.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ili9486l_DrawBitmap</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ili9486l_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ili9486l_DrawRGBImage</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ili9486l_DrawRGBImage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ili9486l_SetDisplayDirection</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ili9486l_SetDisplayDirection &rArr; ili9486l_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_SetDisplayWindow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9486l.o(.data)
</UL>
<P><STRONG><a name="[215]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LCD_GetYSize
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRGBImage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[216]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRGBImage
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[213]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>

<P><STRONG><a name="[218]"></a>BSP_LCD_DisplayChar</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[219]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[21d]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[21b]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>

<P><STRONG><a name="[21a]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DrawHLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[21c]"></a>BSP_LCD_Clear</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetOrientation
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[21e]"></a>BSP_LCD_SetOrientation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_SetOrientation &rArr; BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine &rArr; BSP_LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[21f]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[193]"></a>BSP_LCD_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetOrientation
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[415]"></a>BSP_LCD_SetCursor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>BSP_LCD_GetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>BSP_LCD_GetBackColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>BSP_LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>BSP_LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
</UL>

<P><STRONG><a name="[220]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
</UL>

<P><STRONG><a name="[221]"></a>BSP_LCD_ClearStringLine</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
</UL>

<P><STRONG><a name="[222]"></a>BSP_LCD_DisplayStringAtLine</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[224]"></a>BSP_LCD_DrawVLine</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
</UL>

<P><STRONG><a name="[225]"></a>BSP_LCD_DrawLine</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPolygon
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTriangle
</UL>

<P><STRONG><a name="[226]"></a>BSP_LCD_DrawRect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>

<P><STRONG><a name="[227]"></a>BSP_LCD_DrawCircle</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[228]"></a>BSP_LCD_DrawPolygon</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>

<P><STRONG><a name="[229]"></a>BSP_LCD_DrawEllipse</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>

<P><STRONG><a name="[22a]"></a>BSP_LCD_DrawRGBImage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayWindow
</UL>

<P><STRONG><a name="[22b]"></a>BSP_LCD_FillCircle</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
</UL>

<P><STRONG><a name="[22d]"></a>BSP_LCD_FillPolygon</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTriangle
</UL>

<P><STRONG><a name="[22e]"></a>BSP_LCD_FillEllipse</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>

<P><STRONG><a name="[419]"></a>BSP_LCD_DisplayOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>BSP_LCD_DisplayOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>dmp_thread_entry</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = dmp_thread_entry &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmp.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>dmp_reg_int_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_reg_int_cb &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[23e]"></a>dmp_get_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmp_get_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_reg
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[23f]"></a>dmp_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = dmp_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[240]"></a>dmp_i2c_write</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[242]"></a>dmp_i2c_read</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_int_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_reg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1a5]"></a>dmp_get_eulerangle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dmp_get_eulerangle &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eulerangle
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[192]"></a>dmp_sys_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = dmp_sys_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[b7]"></a>dump_eulerangle</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dump_eulerangle &rArr; dmp_get_eulerangle &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_eulerangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmp.o(FSymTab)
</UL>
<P><STRONG><a name="[24e]"></a>mpu_reg_dump</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
</UL>

<P><STRONG><a name="[24f]"></a>mpu_read_reg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
</UL>

<P><STRONG><a name="[250]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mpu_set_int_latched &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>

<P><STRONG><a name="[245]"></a>mpu_set_sensors</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[251]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mpu_set_bypass &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[252]"></a>mpu_reset_fifo</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = mpu_reset_fifo &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[246]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[253]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mpu_set_lpf &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[254]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[247]"></a>mpu_set_sample_rate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[255]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mpu_set_accel_fsr &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[256]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mpu_set_gyro_fsr &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[244]"></a>mpu_init</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reg_int_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[257]"></a>mpu_get_gyro_reg</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
</UL>

<P><STRONG><a name="[258]"></a>mpu_get_accel_reg</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
</UL>

<P><STRONG><a name="[259]"></a>mpu_get_temperature</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
</UL>

<P><STRONG><a name="[25a]"></a>mpu_set_accel_bias</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>

<P><STRONG><a name="[265]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[266]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[267]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[268]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[41b]"></a>mpu_get_compass_sample_rate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>mpu_set_compass_sample_rate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[235]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[269]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[41d]"></a>mpu_get_power_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>mpu_get_int_status</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
</UL>

<P><STRONG><a name="[25c]"></a>mpu_read_fifo</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
</UL>

<P><STRONG><a name="[25d]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[41e]"></a>mpu_set_int_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[232]"></a>mpu_run_self_test</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = mpu_run_self_test &rArr; accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[26a]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[26b]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = mpu_read_mem &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[26c]"></a>mpu_load_firmware</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[41f]"></a>mpu_get_dmp_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>setup_compass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>mpu_get_compass_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>mpu_get_compass_fsr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>mpu_lp_motion_interrupt</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
</UL>

<P><STRONG><a name="[248]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[249]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[234]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[236]"></a>dmp_set_accel_bias</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[24b]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[423]"></a>dmp_get_fifo_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[270]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[271]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[272]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[273]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[274]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[275]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[276]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[277]"></a>dmp_get_pedometer_step_count</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[278]"></a>dmp_set_pedometer_step_count</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[279]"></a>dmp_get_pedometer_walk_time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[27a]"></a>dmp_set_pedometer_walk_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[27b]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[27d]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[27e]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[24a]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[424]"></a>dmp_get_enabled_features</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[238]"></a>dmp_read_fifo</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
</UL>

<P><STRONG><a name="[425]"></a>dmp_register_tap_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>dmp_register_android_orient_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[427]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[1c8]"></a>NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
</UL>

<P><STRONG><a name="[1ba]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[282]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1be]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[1cc]"></a>DMA_DeInit</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_config
</UL>

<P><STRONG><a name="[1ce]"></a>DMA_Init</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_config
</UL>

<P><STRONG><a name="[428]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>DMA_Cmd</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[283]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[284]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[285]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1d6]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[286]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[287]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[288]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[289]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1cd]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA_GetCmdStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_config
</UL>

<P><STRONG><a name="[28a]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1da]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DMA_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
</UL>

<P><STRONG><a name="[1d1]"></a>DMA_ClearFlag</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[1d2]"></a>DMA_ITConfig</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[28b]"></a>DMA_GetITStatus</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28c]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[429]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
</UL>

<P><STRONG><a name="[42a]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28e]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28f]"></a>EXTI_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1c0]"></a>EXTI_GetITStatus</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = EXTI_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20d]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 832 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = FSMC_NORSRAMInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[42b]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FSMC_NORSRAMCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[291]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[292]"></a>FSMC_NANDInit</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[42c]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>FSMC_NANDCmd</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[294]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[42d]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[42f]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[297]"></a>FSMC_ITConfig</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[298]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[299]"></a>FSMC_ClearFlag</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29a]"></a>FSMC_GetITStatus</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29b]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29c]"></a>GPIO_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[1c5]"></a>GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[430]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1e8]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_scl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_sda
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[29f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a0]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a1]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1e7]"></a>GPIO_SetBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_scl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_sda
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[1e6]"></a>GPIO_ResetBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_scl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_sda
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[2a2]"></a>GPIO_WriteBit</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a3]"></a>GPIO_Write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a4]"></a>GPIO_ToggleBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1e2]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[431]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>RCC_HSEConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[2a7]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2a8]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a9]"></a>RCC_HSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2aa]"></a>RCC_LSEConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ab]"></a>RCC_LSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ac]"></a>RCC_PLLConfig</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ad]"></a>RCC_PLLCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ae]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2af]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b0]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b1]"></a>RCC_MCO1Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b2]"></a>RCC_MCO2Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b3]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[432]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>RCC_HCLKConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b5]"></a>RCC_PCLK1Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b6]"></a>RCC_PCLK2Config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1bd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ctrl
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[2b7]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b9]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1c3]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[2bb]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20c]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_AHB3PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[1e0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1c4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
</UL>

<P><STRONG><a name="[29d]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2bc]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bd]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2be]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[2bf]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[2c0]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c1]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c2]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c3]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c4]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[433]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>RCC_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c7]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c8]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2c9]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1c6]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SYSCFG_EXTILineConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exti_init
</UL>

<P><STRONG><a name="[2ca]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2cb]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[434]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_DeInit</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[1fa]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_TimeBaseInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[435]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ctrl
</UL>

<P><STRONG><a name="[1ec]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_CounterModeConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[2cc]"></a>TIM_SetCounter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ed]"></a>TIM_SetAutoreload</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SetAutoreload &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[1f3]"></a>TIM_GetCounter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = TIM_GetCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_get
</UL>

<P><STRONG><a name="[2cd]"></a>TIM_GetPrescaler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ce]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2cf]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[203]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_ARRPreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[1ee]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SelectOnePulseMode &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[2d0]"></a>TIM_SetClockDivision</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ef]"></a>TIM_Cmd</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[1fb]"></a>TIM_OC1Init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_OC1Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[1fc]"></a>TIM_OC2Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_OC2Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[1fd]"></a>TIM_OC3Init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_OC3Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[1fe]"></a>TIM_OC4Init</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_OC4Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[436]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_SelectOCxM</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[206]"></a>TIM_SetCompare1</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SetCompare1 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
</UL>

<P><STRONG><a name="[207]"></a>TIM_SetCompare2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SetCompare2 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
</UL>

<P><STRONG><a name="[208]"></a>TIM_SetCompare3</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SetCompare3 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
</UL>

<P><STRONG><a name="[209]"></a>TIM_SetCompare4</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
</UL>

<P><STRONG><a name="[2d2]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d3]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d4]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ff]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_OC1PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[200]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_OC2PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[201]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_OC3PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[202]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_OC4PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[2d6]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d9]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2da]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2db]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2dc]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2dd]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2de]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2df]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e0]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e1]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e2]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e4]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e5]"></a>TIM_CCxCmd</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e6]"></a>TIM_CCxNCmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e7]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2e8]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2e9]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2ea]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2eb]"></a>TIM_ICInit</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[437]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>TIM_PWMIConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[2f1]"></a>TIM_GetCapture1</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f2]"></a>TIM_GetCapture2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f3]"></a>TIM_GetCapture3</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f4]"></a>TIM_GetCapture4</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f5]"></a>TIM_BDTRConfig</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[438]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f7]"></a>TIM_SelectCOM</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f8]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f0]"></a>TIM_ITConfig</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ctrl
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_GenerateEvent</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fa]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fb]"></a>TIM_ClearFlag</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f5]"></a>TIM_GetITStatus</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1f2]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TIM_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ctrl
</UL>

<P><STRONG><a name="[2fc]"></a>TIM_DMAConfig</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fd]"></a>TIM_DMACmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fe]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ff]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[300]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[301]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[302]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[303]"></a>TIM_ETRConfig</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[304]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[305]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[306]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[307]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[308]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[309]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30a]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30b]"></a>TIM_RemapConfig</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30c]"></a>USART_DeInit</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c9]"></a>USART_Init</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[439]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>USART_ClockInit</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[43a]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>USART_Cmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[30e]"></a>USART_SetPrescaler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30f]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[310]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[311]"></a>USART_SendData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1d8]"></a>USART_ReceiveData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USART_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[312]"></a>USART_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[313]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[314]"></a>USART_WakeUpConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[315]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[316]"></a>USART_LINCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[317]"></a>USART_SendBreak</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[318]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[319]"></a>USART_SetGuardTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31a]"></a>USART_SmartCardCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31b]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31c]"></a>USART_IrDAConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31d]"></a>USART_IrDACmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1d3]"></a>USART_DMACmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[1d0]"></a>USART_ITConfig</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[1de]"></a>USART_GetFlagStatus</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[31e]"></a>USART_ClearFlag</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1dc]"></a>USART_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[1dd]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[395]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1af]"></a>pid_create</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = pid_create &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[1b5]"></a>pid_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pid_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[1b4]"></a>pid_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pid_reset &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
</UL>

<P><STRONG><a name="[1b7]"></a>pid_config</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_pid
</UL>

<P><STRONG><a name="[1b2]"></a>pid_set_integral_separation</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[1b1]"></a>pid_set_integral_limit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[1b0]"></a>pid_set_output_limit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_init
</UL>

<P><STRONG><a name="[1a6]"></a>pid_position_ctrl</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[43b]"></a>pid_incremental_ctrl</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[43c]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[324]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[e9]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_delhook
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[ea]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_delhook
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[16e]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[16f]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[43d]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f6]"></a>rt_device_hwtimer_isr</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1f4]"></a>rt_device_hwtimer_register</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hwtimer_init
</UL>

<P><STRONG><a name="[326]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[243]"></a>rt_i2c_bus_device_find</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_i2c_bus_device_find &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[241]"></a>rt_i2c_transfer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>

<P><STRONG><a name="[328]"></a>rt_i2c_master_send</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[329]"></a>rt_i2c_master_recv</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[ab]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[327]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[1f7]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[1e9]"></a>rt_device_pin_register</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pin_init
</UL>

<P><STRONG><a name="[337]"></a>rt_pin_attach_irq</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[338]"></a>rt_pin_detach_irq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[339]"></a>rt_pin_irq_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[b8]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[b9]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[ba]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[33a]"></a>rt_device_pwm_register</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[bb]"></a>rt_pwm_enable</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[33c]"></a>rt_pwm_disable</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_disable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[bc]"></a>rt_pwm_set</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[1e4]"></a>rt_hw_serial_register</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[1d7]"></a>rt_hw_serial_isr</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[343]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[34c]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[349]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[344]"></a>rt_data_queue_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[34d]"></a>rt_data_queue_push</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[34a]"></a>rt_data_queue_pop</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[34b]"></a>rt_data_queue_peak</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[352]"></a>rt_data_queue_reset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[353]"></a>finsh_set_prompt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[356]"></a>finsh_get_prompt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_get_prompt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[35a]"></a>finsh_get_prompt_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[35b]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[19a]"></a>finsh_set_device</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[35e]"></a>finsh_get_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[35f]"></a>finsh_set_echo</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[360]"></a>finsh_get_echo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[366]"></a>finsh_thread_entry</STRONG> (Thumb, 1446 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = finsh_thread_entry &rArr; finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[43e]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>finsh_system_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[c0]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c1]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c2]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c3]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c4]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c5]"></a>list_mutex</STRONG> (Thumb, 610 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c6]"></a>list_mailbox</STRONG> (Thumb, 226 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c7]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c8]"></a>list_mempool</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c9]"></a>list_timer</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ca]"></a>list_device</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[cb]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[358]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[cc]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[369]"></a>msh_exec</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[362]"></a>msh_auto_complete</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[cd]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ce]"></a>cmd_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msh_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> msh_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[cf]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[264]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[377]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[23b]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
</UL>

<P><STRONG><a name="[37a]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1b8]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwm_set_duty_ratio
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>

<P><STRONG><a name="[26d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[355]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
</UL>

<P><STRONG><a name="[354]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
</UL>

<P><STRONG><a name="[372]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[359]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[365]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[37f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[43f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[440]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[35d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[381]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[380]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[33b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[443]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[357]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[445]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[448]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[44a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[384]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[44b]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[379]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[76]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[390]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[37e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[44c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[38a]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[38d]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[78]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[392]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[386]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[de]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[393]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[399]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[e3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3bf]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[39e]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[3d6]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[e7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[39f]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[44e]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a2]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3a1]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3a5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3a3]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[3a4]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[388]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[398]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[389]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[397]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3a6]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[38c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3a8]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[239]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
</UL>

<P><STRONG><a name="[19f]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[23a]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
</UL>

<P><STRONG><a name="[1b6]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_pid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_angle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_radius
</UL>

<P><STRONG><a name="[1a9]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
</UL>

<P><STRONG><a name="[260]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[3b9]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[1a4]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[3b6]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3b8]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3b1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3b7]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3ac]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3b5]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3bc]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3ad]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3aa]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[3b4]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3ab]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[3a9]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[39c]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3a0]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[37b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3ae]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3be]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3a7]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[dc]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[3b3]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[452]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[453]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[454]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[455]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[456]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_pid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_angle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_swing_radius
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3c0]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3c3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[3c6]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[3ca]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3c8]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3ba]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3c9]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[3cb]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[457]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[3bd]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[458]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[459]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3cc]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3cf]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[3cd]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3c2]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3c5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3ce]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3b2]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3d0]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3d2]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_thread_entry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[3d3]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[3d4]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[d7]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[45a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[45b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3c1]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[3c7]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[3bb]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[38f]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[39b]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[39a]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3d5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a3]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[a4]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[a9]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[ad]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[6f]"></a>rt_thread_idle_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[116]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[114]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[117]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[138]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[119]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[11b]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[126]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[154]"></a>print_number</STRONG> (Thumb, 414 bytes, Stack size 60 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[153]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[15d]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[162]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[163]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[165]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[166]"></a>_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[169]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[172]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[174]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[175]"></a>_rt_thread_init</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[188]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[181]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[183]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[185]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[182]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[184]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[19c]"></a>swing_move</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = swing_move &rArr; pwm_set_duty_ratio &rArr; TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_deinit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_5
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swing_mode_1
</UL>

<P><STRONG><a name="[71]"></a>swing_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = swing_timer_cb &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>swing_thread_entry</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, wind_swing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swing_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wind_swing.o(.text)
</UL>
<P><STRONG><a name="[1c2]"></a>rt_hw_exti_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_hw_exti_init &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_platform_init
</UL>

<P><STRONG><a name="[7c]"></a>stm32_configure</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>dma_uart_config</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dma_uart_config &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[1cf]"></a>DMA_Configuration</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = DMA_Configuration &rArr; dma_uart_config &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_config
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[7d]"></a>stm32_control</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = stm32_control &rArr; DMA_Configuration &rArr; dma_uart_config &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>stm32_putc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>stm32_getc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>dma_uart_rx_idle_isr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[1d9]"></a>dma_rx_done_isr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>uart_isr</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>RCC_Configuration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RCC_Configuration &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[1e1]"></a>GPIO_Configuration</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GPIO_Configuration &rArr; GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[1e3]"></a>NVIC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[1ea]"></a>NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[83]"></a>timer_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = timer_init &rArr; NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>timer_start</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = timer_start &rArr; TIM_SetAutoreload &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>timer_stop</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = timer_stop &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>timer_ctrl</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = timer_ctrl &rArr; TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>timer_counter_get</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = timer_counter_get &rArr; TIM_GetCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>gpio_set_sda</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gpio_set_sda &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>gpio_set_scl</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gpio_set_scl &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>gpio_get_sda</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = gpio_get_sda &rArr; GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>gpio_get_scl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = gpio_get_scl &rArr; GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>gpio_udelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_udelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>GPIO_Configuration</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GPIO_Configuration &rArr; GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1f9]"></a>TIM_Configuration</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TIM_Configuration &rArr; TIM_OC4Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[20a]"></a>LCD_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = LCD_Delay &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_Init
</UL>

<P><STRONG><a name="[20b]"></a>LCD_IO_Init</STRONG> (Thumb, 408 bytes, Stack size 128 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = LCD_IO_Init &rArr; GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_Init
</UL>

<P><STRONG><a name="[212]"></a>LCD_IO_ReadData</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ili9486l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9486l_ReadData
</UL>

<P><STRONG><a name="[214]"></a>SetDisplayWindow</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRGBImage
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[217]"></a>DrawChar</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[22c]"></a>FillTriangle</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, bsp_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
</UL>

<P><STRONG><a name="[230]"></a>inv_row_to_scaler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, dmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[22f]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_to_scaler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[231]"></a>run_self_test</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[23c]"></a>dmp_thread_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = dmp_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_sys_init
</UL>

<P><STRONG><a name="[72]"></a>dmp_notify_update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dmp_notify_update &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmp.o(.text)
</UL>
<P><STRONG><a name="[24d]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = set_int_enable &rArr; dmp_i2c_write &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[25e]"></a>get_accel_prod_shift</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25f]"></a>accel_self_test</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[262]"></a>gyro_self_test</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = gyro_self_test &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[263]"></a>get_st_biases</STRONG> (Thumb, 1140 bytes, Stack size 64 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = get_st_biases &rArr; dmp_i2c_read &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_i2c_write
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_delay_ms
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[280]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[281]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2ef]"></a>TI4_Config</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2ee]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2ed]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2ec]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[31f]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[320]"></a>bus_fault_track</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[321]"></a>mem_manage_fault_track</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[322]"></a>hard_fault_track</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[325]"></a>timeout_calc</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</UL>

<P><STRONG><a name="[8d]"></a>rt_hwtimer_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>rt_hwtimer_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hwtimer_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>rt_hwtimer_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>rt_hwtimer_read</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_hwtimer_read &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>rt_hwtimer_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hwtimer_write &rArr; timeout_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>rt_hwtimer_control</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, hwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_hwtimer_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>i2c_bus_device_read</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>i2c_bus_device_write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>i2c_bus_device_control</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>SCL_H</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>

<P><STRONG><a name="[32c]"></a>i2c_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_start &rArr; i2c_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
</UL>

<P><STRONG><a name="[32d]"></a>i2c_restart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[32e]"></a>i2c_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
</UL>

<P><STRONG><a name="[330]"></a>i2c_writeb</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
</UL>

<P><STRONG><a name="[331]"></a>i2c_readb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[332]"></a>i2c_send_bytes</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[333]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = i2c_send_ack_or_nack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[334]"></a>i2c_recv_bytes</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[335]"></a>i2c_send_address</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[336]"></a>i2c_bit_send_address</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[96]"></a>i2c_bit_xfer</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.constdata)
</UL>
<P><STRONG><a name="[32b]"></a>i2c_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[32f]"></a>i2c_delay2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c-bit-ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[97]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>_pwm_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>_pwm_read</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>_pwm_write</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>pwm_enable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pwm_enable &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[be]"></a>pwm_disable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = pwm_disable &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[bf]"></a>pwm_set</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = pwm_set &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[33d]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[33e]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[33f]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
</UL>

<P><STRONG><a name="[340]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[341]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dma_recv_update_put_index &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[342]"></a>_serial_dma_rx</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[9d]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>rt_serial_open</STRONG> (Thumb, 804 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>rt_serial_close</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>rt_serial_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>rt_serial_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>rt_serial_control</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[345]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[348]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[346]"></a>_serial_int_tx</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[347]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[34e]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[350]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[34f]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[351]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[35c]"></a>finsh_getchar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[75]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[361]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[363]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[364]"></a>shell_push_history</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[371]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[36b]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[36c]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[36f]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[370]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[36d]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[373]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[374]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[375]"></a>_msh_exec_cmd</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[376]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[385]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[77]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[38e]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3d1]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[3c4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[396]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
